<style is:inline>
  :root {
    --primary-gold: #ffd700;
    --secondary-gold: #ffed4e;
    --accent-red: #ff2d2d;
    --accent-green: #00ff88;
    --accent-blue: #00ccff;
    --dark-bg: #0a0a0a;
    --card-bg: linear-gradient(145deg, #1a1a1a, #2d2d2d);
    --glass-bg: rgba(255, 255, 255, 0.05);
    --neon-shadow: 0 0 20px;
    --win-green: #28a745;
    --lose-red: #dc3545;
    --track-brown: #8b4513;
  }

  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  body {
    font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
    background: radial-gradient(
        circle at 20% 50%,
        rgba(120, 119, 198, 0.3) 0%,
        transparent 50%
      ),
      radial-gradient(
        circle at 80% 20%,
        rgba(255, 119, 198, 0.3) 0%,
        transparent 50%
      ),
      radial-gradient(
        circle at 40% 80%,
        rgba(120, 219, 255, 0.3) 0%,
        transparent 50%
      ),
      linear-gradient(
        135deg,
        #0c0c0c 0%,
        #1a1a1a 25%,
        #0f0f0f 50%,
        #1a1a1a 75%,
        #0c0c0c 100%
      );
    color: white;
    min-height: 100vh;
    padding: 20px;
    overflow-x: hidden;
    position: relative;
  }

  body::before {
    content: "";
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: repeating-linear-gradient(
        90deg,
        transparent,
        transparent 98px,
        rgba(255, 215, 0, 0.02) 100px
      ),
      repeating-linear-gradient(
        0deg,
        transparent,
        transparent 98px,
        rgba(255, 215, 0, 0.02) 100px
      );
    pointer-events: none;
    z-index: 1;
  }

  .casino-container {
    max-width: 1400px;
    margin: 0 auto;
    position: relative;
    z-index: 2;
  }

  .title {
    text-align: center;
    font-size: clamp(2rem, 5vw, 4rem);
    font-weight: 900;
    background: linear-gradient(
      45deg,
      var(--primary-gold),
      var(--secondary-gold),
      var(--primary-gold)
    );
    background-size: 200% 200%;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    margin-bottom: 2rem;
    text-shadow: 0 0 30px rgba(255, 215, 0, 0.5);
    animation:
      titleShine 3s ease-in-out infinite,
      titleFloat 6s ease-in-out infinite;
    letter-spacing: 2px;
  }

  @keyframes titleShine {
    0%,
    100% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
  }

  @keyframes titleFloat {
    0%,
    100% {
      transform: translateY(0px);
    }
    50% {
      transform: translateY(-10px);
    }
  }

  .game-header {
    display: grid;
    grid-template-columns: 1fr auto 1fr;
    gap: 2rem;
    align-items: center;
    background: var(--card-bg);
    border: 3px solid transparent;
    background-clip: padding-box;
    border-radius: 25px;
    padding: 2rem;
    margin-bottom: 2rem;
    position: relative;
    backdrop-filter: blur(10px);
    box-shadow:
      0 8px 32px rgba(0, 0, 0, 0.3),
      inset 0 1px 0 rgba(255, 255, 255, 0.1);
  }

  .game-header::before {
    content: "";
    position: absolute;
    inset: 0;
    padding: 3px;
    background: linear-gradient(
      45deg,
      var(--primary-gold),
      var(--accent-blue),
      var(--primary-gold)
    );
    border-radius: inherit;
    mask:
      linear-gradient(#fff 0 0) content-box,
      linear-gradient(#fff 0 0);
    mask-composite: exclude;
    animation: borderGlow 3s linear infinite;
  }

  @keyframes borderGlow {
    0%,
    100% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
  }

  .balance-info {
    font-size: 1.8rem;
    font-weight: 900;
    text-align: center;
    padding: 1rem;
    background: var(--glass-bg);
    border-radius: 15px;
    border: 2px solid rgba(0, 255, 136, 0.3);
    backdrop-filter: blur(5px);
  }

  .balance-amount {
    color: var(--accent-green);
    text-shadow: var(--neon-shadow) var(--accent-green);
    animation: balancePulse 2s ease-in-out infinite;
  }

  .bet-amount {
    color: var(--primary-gold);
    text-shadow: var(--neon-shadow) var(--primary-gold);
  }

  @keyframes balancePulse {
    0%,
    100% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.05);
    }
  }

  .race-info {
    text-align: center;
    background: var(--glass-bg);
    padding: 1.5rem;
    border-radius: 15px;
    border: 2px solid rgba(255, 45, 45, 0.3);
    backdrop-filter: blur(5px);
  }

  .race-number {
    font-size: 1.5rem;
    color: var(--primary-gold);
    font-weight: 700;
    margin-bottom: 0.5rem;
  }

  .countdown {
    font-size: 2.5rem;
    color: var(--accent-red);
    font-weight: 900;
    text-shadow: var(--neon-shadow) var(--accent-red);
    animation: countdownPulse 1s ease-in-out infinite;
  }

  @keyframes countdownPulse {
    0%,
    100% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.2);
    }
  }

  .racetrack {
    background: linear-gradient(
      to bottom,
      var(--track-brown) 0%,
      #a0522d 10%,
      #d2691e 50%,
      #a0522d 90%,
      var(--track-brown) 100%
    );
    border: 4px solid #654321;
    border-radius: 25px;
    padding: 2rem;
    margin: 2rem 0;
    position: relative;
    overflow: hidden;
    box-shadow:
      inset 0 0 50px rgba(0, 0, 0, 0.4),
      0 0 30px rgba(0, 0, 0, 0.5);
    min-width: 600px;
  }

  .track-lanes {
    position: relative;
    height: 400px;
    width: 100%;
  }

  .lane {
    height: 80px;
    margin-bottom: 20px;
    position: relative;
    background: linear-gradient(
      90deg,
      transparent 0%,
      rgba(255, 255, 255, 0.1) 2%,
      transparent 4%,
      transparent 96%,
      rgba(255, 255, 255, 0.1) 98%,
      transparent 100%
    );
    border-top: 2px dashed rgba(255, 255, 255, 0.3);
    border-bottom: 2px dashed rgba(255, 255, 255, 0.3);
    border-radius: 8px;
    width: 100%;
  }

  .lane:last-child {
    margin-bottom: 0;
  }

  .horse {
    position: absolute;
    left: 20px;
    top: 50%;
    transform: translateY(-50%);
    font-size: 3rem;
    transition: left 0.1s linear;
    z-index: 10;
    filter: drop-shadow(0 0 10px rgba(0, 0, 0, 0.8));
    cursor: pointer;
    will-change: left;
  }

  .horse.running {
    animation: gallop 0.3s ease-in-out infinite alternate;
  }

  @keyframes gallop {
    from {
      transform: translateY(-50%) rotate(-3deg) scale(1);
    }
    to {
      transform: translateY(-50%) rotate(3deg) scale(1.05);
    }
  }

  .horse.winner {
    animation: winnerCelebration 1.5s ease-in-out infinite;
    filter: drop-shadow(0 0 25px var(--primary-gold));
    z-index: 20;
  }

  @keyframes winnerCelebration {
    0%,
    100% {
      transform: translateY(-50%) scale(1) rotateZ(0deg);
    }
    25% {
      transform: translateY(-50%) scale(1.2) rotateZ(5deg);
    }
    50% {
      transform: translateY(-50%) scale(1.3) rotateZ(0deg);
    }
    75% {
      transform: translateY(-50%) scale(1.2) rotateZ(-5deg);
    }
  }

  .finish-line {
    position: absolute;
    right: 30px;
    top: 0;
    bottom: 0;
    width: 8px;
    background: repeating-linear-gradient(
      0deg,
      #000 0px,
      #000 15px,
      #fff 15px,
      #fff 30px
    );
    box-shadow: 0 0 20px rgba(255, 255, 255, 0.8);
    border-radius: 4px;
    z-index: 5;
  }

  .distance-markers {
    position: absolute;
    top: -40px;
    left: 0;
    right: 0;
    display: flex;
    justify-content: space-between;
    font-size: 1rem;
    color: #bdc3c7;
    font-weight: 600;
    padding: 0 20px;
  }

  .quarter-markers {
    position: absolute;
    top: 0;
    bottom: 0;
    width: 2px;
    background: rgba(255, 255, 255, 0.2);
    z-index: 3;
  }

  .quarter-markers.marker-25 {
    left: 25%;
  }

  .quarter-markers.marker-50 {
    left: 50%;
    background: rgba(255, 215, 0, 0.3);
    width: 3px;
  }

  .quarter-markers.marker-75 {
    left: 75%;
  }

  .progress-indicator {
    position: absolute;
    top: -25px;
    font-size: 0.8rem;
    color: var(--primary-gold);
    font-weight: 700;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .progress-indicator.visible {
    opacity: 1;
  }

  .betting-dashboard {
    display: grid;
    grid-template-columns: 1fr 350px;
    gap: 2rem;
    margin: 2rem 0;
  }

  .horses-selection {
    background: var(--card-bg);
    border: 3px solid rgba(0, 204, 255, 0.3);
    border-radius: 20px;
    padding: 2rem;
    backdrop-filter: blur(10px);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
  }

  .section-title {
    color: var(--primary-gold);
    font-size: 1.5rem;
    font-weight: 900;
    margin-bottom: 1.5rem;
    text-align: center;
    text-shadow: 0 0 15px var(--primary-gold);
  }

  .horse-grid {
    display: grid;
    gap: 1rem;
  }

  .horse-card {
    background: linear-gradient(145deg, #2a2a2a, #1a1a1a);
    border: 2px solid rgba(255, 215, 0, 0.2);
    border-radius: 15px;
    padding: 1.5rem;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    overflow: hidden;
  }

  .horse-card::before {
    content: "";
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 215, 0, 0.1),
      transparent
    );
    transition: left 0.5s;
  }

  .horse-card:hover::before {
    left: 100%;
  }

  .horse-card:hover {
    border-color: var(--accent-blue);
    background: linear-gradient(145deg, #3a3a3a, #2a2a2a);
    transform: translateY(-5px);
    box-shadow: 0 10px 25px rgba(0, 204, 255, 0.3);
  }

  .horse-card.selected {
    border-color: var(--accent-red);
    background: linear-gradient(145deg, #4a2a2a, #3a1a1a);
    box-shadow: var(--neon-shadow) rgba(255, 45, 45, 0.4);
    transform: scale(1.02);
  }

  .horse-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
  }

  .horse-name {
    font-size: 1.3rem;
    font-weight: 700;
    color: #ecf0f1;
  }

  .horse-emoji {
    font-size: 2.5rem;
    animation: horseAnimation 3s ease-in-out infinite;
  }

  @keyframes horseAnimation {
    0%,
    100% {
      transform: translateY(0px);
    }
    50% {
      transform: translateY(-5px);
    }
  }

  .horse-stats {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 0.5rem;
    margin-bottom: 1rem;
    font-size: 0.9rem;
    color: #bdc3c7;
  }

  .stat-item {
    background: rgba(255, 255, 255, 0.05);
    padding: 0.5rem;
    border-radius: 8px;
    text-align: center;
  }

  .odds {
    color: var(--primary-gold);
    font-weight: 900;
    font-size: 1.2rem;
    text-align: center;
    background: rgba(255, 215, 0, 0.1);
    padding: 0.5rem;
    border-radius: 10px;
    text-shadow: 0 0 10px var(--primary-gold);
  }

  .betting-controls {
    background: var(--card-bg);
    border: 3px solid rgba(40, 167, 69, 0.3);
    border-radius: 20px;
    padding: 2rem;
    backdrop-filter: blur(10px);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
  }

  .controls-title {
    color: var(--accent-green);
    font-size: 1.5rem;
    font-weight: 900;
    margin-bottom: 1.5rem;
    text-align: center;
    text-shadow: 0 0 15px var(--accent-green);
  }

  .bet-amount-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  .amount-chip {
    padding: 1rem;
    background: linear-gradient(145deg, #2a2a2a, #1a1a1a);
    border: 2px solid rgba(255, 215, 0, 0.2);
    border-radius: 12px;
    text-align: center;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    font-weight: 700;
    font-size: 1rem;
    position: relative;
    overflow: hidden;
  }

  .amount-chip::before {
    content: "";
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 215, 0, 0.2),
      transparent
    );
    transition: left 0.5s;
  }

  .amount-chip:hover::before {
    left: 100%;
  }

  .amount-chip:hover {
    border-color: var(--accent-blue);
    background: linear-gradient(145deg, #3a3a3a, #2a2a2a);
    transform: translateY(-3px);
    box-shadow: 0 8px 20px rgba(0, 204, 255, 0.2);
  }

  .amount-chip.selected {
    border-color: var(--primary-gold);
    background: linear-gradient(145deg, #4a4a2a, #3a3a1a);
    box-shadow: var(--neon-shadow) rgba(255, 215, 0, 0.3);
    transform: scale(1.05);
  }

  .bet-types {
    margin-bottom: 1.5rem;
  }

  .bet-type {
    background: linear-gradient(145deg, #2a2a2a, #1a1a1a);
    border: 2px solid rgba(255, 215, 0, 0.2);
    border-radius: 12px;
    padding: 1rem;
    margin-bottom: 1rem;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    text-align: center;
    font-weight: 600;
    position: relative;
    overflow: hidden;
  }

  .bet-type::before {
    content: "";
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 215, 0, 0.1),
      transparent
    );
    transition: left 0.5s;
  }

  .bet-type:hover::before {
    left: 100%;
  }

  .bet-type:hover {
    border-color: #e67e22;
    background: linear-gradient(145deg, #3a2a1a, #2a1a1a);
    transform: translateY(-3px);
    box-shadow: 0 8px 20px rgba(230, 126, 34, 0.2);
  }

  .bet-type.selected {
    border-color: var(--accent-red);
    background: linear-gradient(145deg, #4a1a1a, #3a1a1a);
    box-shadow: var(--neon-shadow) rgba(255, 45, 45, 0.3);
  }

  .current-bet-display {
    background: var(--glass-bg);
    border: 2px solid rgba(255, 215, 0, 0.3);
    border-radius: 15px;
    padding: 1.5rem;
    margin-bottom: 1.5rem;
    text-align: center;
    backdrop-filter: blur(5px);
  }

  .bet-info-title {
    color: var(--primary-gold);
    font-weight: 700;
    margin-bottom: 0.5rem;
  }

  .potential-payout {
    color: var(--accent-green);
    font-size: 1.2rem;
    font-weight: 900;
    margin-top: 0.5rem;
    text-shadow: 0 0 10px var(--accent-green);
  }

  .start-race-button {
    width: 100%;
    padding: 1.5rem;
    font-size: 1.4rem;
    font-weight: 900;
    background: linear-gradient(145deg, var(--win-green), #1e7e34);
    color: white;
    border: none;
    border-radius: 15px;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    text-transform: uppercase;
    letter-spacing: 1px;
    box-shadow:
      0 8px 15px rgba(0, 0, 0, 0.3),
      0 0 0 3px rgba(40, 167, 69, 0.3);
    position: relative;
    overflow: hidden;
  }

  .start-race-button::before {
    content: "";
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 255, 255, 0.2),
      transparent
    );
    transition: left 0.5s;
  }

  .start-race-button:hover:not(:disabled)::before {
    left: 100%;
  }

  .start-race-button:hover:not(:disabled) {
    background: linear-gradient(145deg, #2ecc71, var(--win-green));
    transform: translateY(-3px) scale(1.02);
    box-shadow:
      0 12px 25px rgba(46, 204, 113, 0.4),
      0 0 0 3px rgba(46, 204, 113, 0.5);
  }

  .start-race-button:disabled {
    background: linear-gradient(145deg, #6c757d, #5a6268);
    cursor: not-allowed;
    transform: none;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  }

  .race-results {
    text-align: center;
    margin: 2rem 0;
    min-height: 150px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    background: var(--glass-bg);
    border-radius: 20px;
    padding: 2rem;
    backdrop-filter: blur(5px);
    border: 2px solid rgba(255, 215, 0, 0.2);
  }

  .winner-announcement {
    font-size: 2.5rem;
    font-weight: 900;
    background: linear-gradient(
      45deg,
      var(--primary-gold),
      var(--secondary-gold)
    );
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    text-shadow: 0 0 30px var(--primary-gold);
    animation: winnerGlow 1.5s ease-in-out infinite;
    margin-bottom: 1rem;
  }

  @keyframes winnerGlow {
    0%,
    100% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.1);
    }
  }

  .payout-info {
    font-size: 2rem;
    color: var(--accent-green);
    font-weight: 900;
    text-shadow: 0 0 20px var(--accent-green);
    animation: payoutPulse 2s ease-in-out infinite;
  }

  .lose-info {
    font-size: 1.8rem;
    color: var(--lose-red);
    font-weight: 700;
    text-shadow: 0 0 15px var(--lose-red);
    animation: loseShake 0.5s ease-in-out;
  }

  @keyframes payoutPulse {
    0%,
    100% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.05);
    }
  }

  @keyframes loseShake {
    0%,
    100% {
      transform: translateX(0);
    }
    25% {
      transform: translateX(-10px);
    }
    75% {
      transform: translateX(10px);
    }
  }

  .final-positions {
    margin-top: 1.5rem;
    background: rgba(0, 0, 0, 0.3);
    padding: 1.5rem;
    border-radius: 15px;
    backdrop-filter: blur(5px);
  }

  .position-row {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.8rem;
    margin: 0.5rem 0;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 10px;
    font-weight: 600;
  }

  .position-medal {
    font-size: 1.5rem;
  }

  .statistics-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1.5rem;
    margin: 2rem 0;
  }

  .stat-card {
    background: var(--card-bg);
    border: 2px solid rgba(255, 215, 0, 0.2);
    border-radius: 15px;
    padding: 1.5rem;
    text-align: center;
    backdrop-filter: blur(10px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
    transition: transform 0.3s ease;
  }

  .stat-card:hover {
    transform: translateY(-5px);
    border-color: var(--accent-blue);
    box-shadow: 0 12px 30px rgba(0, 204, 255, 0.2);
  }

  .stat-card-title {
    color: var(--accent-blue);
    font-size: 1.1rem;
    font-weight: 700;
    margin-bottom: 1rem;
  }

  .stat-card-value {
    color: #ecf0f1;
    font-size: 2rem;
    font-weight: 900;
    text-shadow: 0 0 10px rgba(255, 255, 255, 0.3);
  }

  .celebration-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 1000;
  }

  .confetti {
    position: absolute;
    width: 10px;
    height: 10px;
    background: var(--primary-gold);
    animation: confetti-fall 3s linear infinite;
  }

  @keyframes confetti-fall {
    0% {
      transform: translateY(-100vh) rotate(0deg);
      opacity: 1;
    }
    100% {
      transform: translateY(100vh) rotate(720deg);
      opacity: 0;
    }
  }

  @media (max-width: 1024px) {
    .betting-dashboard {
      grid-template-columns: 1fr;
    }

    .game-header {
      grid-template-columns: 1fr;
      text-align: center;
      gap: 1rem;
    }
  }

  @media (max-width: 768px) {
    .title {
      font-size: 2rem;
      margin-bottom: 1.5rem;
    }

    .horse {
      font-size: 2.5rem;
    }

    .track-lanes {
      height: 320px;
    }

    .lane {
      height: 65px;
      margin-bottom: 15px;
    }

    .bet-amount-grid {
      grid-template-columns: 1fr;
    }

    .statistics-grid {
      grid-template-columns: repeat(2, 1fr);
    }

    .casino-container {
      padding: 10px;
    }
  }
</style>
<div class="casino-container">
  <h1 class="title">🏇 HIPÓDROMO CASINO PREMIUM 🏇</h1>

  <div class="game-header">
    <div class="balance-info">
      <div>💰 BALANCE</div>
      <div class="balance-amount">$<span id="balance">1000</span></div>
    </div>
    <div class="race-info">
      <div class="race-number">Carrera #<span id="raceNumber">1</span></div>
      <div id="countdownDisplay"></div>
    </div>
    <div class="balance-info">
      <div>🎯 APUESTA</div>
      <div class="bet-amount">$<span id="totalBet">0</span></div>
    </div>
  </div>

  <div class="racetrack">
    <div class="distance-markers">
      <span>🏁 INICIO</span>
      <span>25%</span>
      <span>50%</span>
      <span>75%</span>
      <span>🏆 META</span>
    </div>

    <div class="track-lanes" id="trackLanes">
      <!-- Los carriles se generarán dinámicamente -->
    </div>

    <div class="quarter-markers marker-25"></div>
    <div class="quarter-markers marker-50"></div>
    <div class="quarter-markers marker-75"></div>
    <div class="finish-line"></div>
  </div>

  <div class="betting-dashboard">
    <div class="horses-selection">
      <h3 class="section-title">🐎 SELECCIÓN DE CABALLOS</h3>
      <div class="horse-grid" id="horsesContainer">
        <!-- Los caballos se generarán dinámicamente -->
      </div>
    </div>

    <div class="betting-controls">
      <h3 class="controls-title">💰 CENTRO DE APUESTAS</h3>

      <div class="bet-amount-grid">
        <div class="amount-chip selected" data-amount="10">$10</div>
        <div class="amount-chip" data-amount="25">$25</div>
        <div class="amount-chip" data-amount="50">$50</div>
        <div class="amount-chip" data-amount="100">$100</div>
        <div class="amount-chip" data-amount="200">$200</div>
        <div class="amount-chip" data-amount="500">$500</div>
      </div>

      <div class="bet-types">
        <div class="bet-type selected" data-type="win">
          🥇 GANADOR (Mayor Pago)
        </div>
        <div class="bet-type" data-type="place">🥈 LUGAR (1º o 2º)</div>
        <div class="bet-type" data-type="show">🥉 SHOW (1º, 2º o 3º)</div>
      </div>

      <div class="current-bet-display">
        <div class="bet-info-title">🎯 INFORMACIÓN DE APUESTA</div>
        <div id="betInfo">Selecciona un caballo para apostar</div>
        <div class="potential-payout" id="potentialPayout"></div>
      </div>

      <button class="start-race-button" id="startRaceButton">
        🏁 ¡INICIAR CARRERA! 🏁
      </button>
    </div>
  </div>

  <div class="race-results" id="raceResults">
    <div>🎲 ¡Selecciona tu caballo favorito y comienza la carrera! 🎲</div>
  </div>

  <div class="statistics-grid">
    <div class="stat-card">
      <div class="stat-card-title">📊 Carreras Totales</div>
      <div class="stat-card-value" id="totalRaces">0</div>
    </div>
    <div class="stat-card">
      <div class="stat-card-title">🏆 Victorias</div>
      <div class="stat-card-value" id="wins">0</div>
    </div>
    <div class="stat-card">
      <div class="stat-card-title">📈 % Aciertos</div>
      <div class="stat-card-value" id="winRate">0%</div>
    </div>
    <div class="stat-card">
      <div class="stat-card-title">💵 Ganancia Total</div>
      <div class="stat-card-value" id="totalProfit">$0</div>
    </div>
  </div>
</div>

<div class="celebration-overlay" id="celebrationOverlay"></div>

<script is:inline>
  class HorseRacingGame {
    constructor() {
      // Estado del juego
      this.balance = 1000;
      this.selectedHorse = null;
      this.selectedAmount = 10;
      this.selectedBetType = "win";
      this.isRacing = false;
      this.raceNumber = 1;
      this.currentRaceResults = null;

      // Estadísticas
      this.stats = {
        totalRaces: 0,
        wins: 0,
        totalProfit: 0,
      };

      // Sistema de probabilidades rigged (88% house edge)
      this.houseEdge = 0.88;

      // Definir caballos con estadísticas
      this.horses = [
        {
          id: 1,
          name: "Rayo Dorado",
          emoji: "🐎",
          color: "#f1c40f",
          speed: 0.85,
          stamina: 0.9,
          odds: 3.5,
          currentPosition: 0,
        },
        {
          id: 2,
          name: "Viento Negro",
          emoji: "🐴",
          color: "#34495e",
          speed: 0.92,
          stamina: 0.75,
          odds: 2.8,
          currentPosition: 0,
        },
        {
          id: 3,
          name: "Estrella Roja",
          emoji: "🏇",
          color: "#e74c3c",
          speed: 0.88,
          stamina: 0.82,
          odds: 3.2,
          currentPosition: 0,
        },
        {
          id: 4,
          name: "Trueno Azul",
          emoji: "🦄",
          color: "#3498db",
          speed: 0.78,
          stamina: 0.95,
          odds: 4.2,
          currentPosition: 0,
        },
      ];

      this.init();
    }

    init() {
      this.createTrack();
      this.createHorseCards();
      this.setupEventListeners();
      this.updateDisplay();
      this.showWelcomeMessage();
    }

    showWelcomeMessage() {
      console.log("🏇 Hipódromo Casino Premium iniciado");
      console.log("🎯 Sistema rigged activado (88% house edge)");
      console.log("💰 ¡Que tengas suerte... la vas a necesitar!");
    }

    createTrack() {
      const trackLanes = document.getElementById("trackLanes");
      if (!trackLanes) return;

      trackLanes.innerHTML = "";

      this.horses.forEach((horse, index) => {
        const lane = document.createElement("div");
        lane.className = "lane";

        const horseElement = document.createElement("div");
        horseElement.className = "horse";
        horseElement.id = `horse-${horse.id}`;
        horseElement.textContent = horse.emoji;
        horseElement.style.color = horse.color;
        horseElement.title = horse.name;

        // Añadir indicador de progreso
        const progressIndicator = document.createElement("div");
        progressIndicator.className = "progress-indicator";
        progressIndicator.id = `progress-${horse.id}`;
        progressIndicator.textContent = horse.name;

        lane.appendChild(horseElement);
        lane.appendChild(progressIndicator);
        trackLanes.appendChild(lane);
      });
    }

    createHorseCards() {
      const container = document.getElementById("horsesContainer");
      if (!container) return;

      container.innerHTML = "";

      this.horses.forEach((horse) => {
        const card = document.createElement("div");
        card.className = "horse-card";
        card.dataset.horseId = horse.id.toString();

        card.innerHTML = `
                        <div class="horse-header">
                            <div class="horse-name">${horse.name}</div>
                            <div class="horse-emoji">${horse.emoji}</div>
                        </div>
                        <div class="horse-stats">
                            <div class="stat-item">
                                <div>Velocidad</div>
                                <div>${Math.round(horse.speed * 100)}%</div>
                            </div>
                            <div class="stat-item">
                                <div>Resistencia</div>
                                <div>${Math.round(horse.stamina * 100)}%</div>
                            </div>
                        </div>
                        <div class="odds">Cuota: ${horse.odds}:1</div>
                    `;

        card.addEventListener("click", () => this.selectHorse(horse.id));
        container.appendChild(card);
      });
    }

    setupEventListeners() {
      // Selección de cantidad de apuesta
      document.querySelectorAll(".amount-chip").forEach((chip) => {
        chip.addEventListener("click", (e) => {
          const selected = document.querySelector(".amount-chip.selected");
          if (selected) selected.classList.remove("selected");

          const target = e.target;
          target.classList.add("selected");
          this.selectedAmount = parseInt(target.dataset.amount || "10");
          this.updateBetInfo();
        });
      });

      // Selección de tipo de apuesta
      document.querySelectorAll(".bet-type").forEach((type) => {
        type.addEventListener("click", (e) => {
          const selected = document.querySelector(".bet-type.selected");
          if (selected) selected.classList.remove("selected");

          const target = e.target;
          target.classList.add("selected");
          this.selectedBetType = target.dataset.type || "win";
          this.updateBetInfo();
        });
      });

      // Botón de iniciar carrera
      const startButton = document.getElementById("startRaceButton");
      if (startButton) {
        startButton.addEventListener("click", () => {
          this.startRace();
        });
      }
    }

    selectHorse(horseId) {
      if (this.isRacing) return;

      // Actualizar selección visual
      document
        .querySelectorAll(".horse-card")
        .forEach((card) => card.classList.remove("selected"));

      const selectedCard = document.querySelector(
        `[data-horse-id="${horseId}"]`
      );
      if (selectedCard) selectedCard.classList.add("selected");

      this.selectedHorse = horseId;
      this.updateBetInfo();
    }

    updateBetInfo() {
      const betInfo = document.getElementById("betInfo");
      const potentialPayout = document.getElementById("potentialPayout");

      if (!betInfo || !potentialPayout) return;

      if (!this.selectedHorse) {
        betInfo.textContent = "Selecciona un caballo para apostar";
        potentialPayout.textContent = "";
        return;
      }

      const horse = this.horses.find((h) => h.id === this.selectedHorse);
      if (!horse) return;

      const multiplier = this.getBetMultiplier(this.selectedBetType);
      const potentialWin = Math.round(
        this.selectedAmount * horse.odds * multiplier
      );

      betInfo.innerHTML = `
                    <div><strong>${horse.name}</strong></div>
                    <div>Tipo: ${this.getBetTypeName(this.selectedBetType)}</div>
                    <div>Apuesta: $${this.selectedAmount}</div>
                `;

      potentialPayout.textContent = `💰 Ganancia Potencial: $${potentialWin}`;
    }

    getBetMultiplier(betType) {
      const multipliers = {
        win: 1.0, // Pago completo
        place: 0.5, // 50% del pago
        show: 0.3, // 30% del pago
      };
      return multipliers[betType] || 1.0;
    }

    getBetTypeName(betType) {
      const names = {
        win: "Ganador",
        place: "Lugar (1º-2º)",
        show: "Show (1º-3º)",
      };
      return names[betType] || "Desconocido";
    }

    updateDisplay() {
      const balanceEl = document.getElementById("balance");
      const totalBetEl = document.getElementById("totalBet");
      const raceNumberEl = document.getElementById("raceNumber");

      if (balanceEl) balanceEl.textContent = this.balance.toString();
      if (totalBetEl)
        totalBetEl.textContent = (
          this.selectedHorse ? this.selectedAmount : 0
        ).toString();
      if (raceNumberEl) raceNumberEl.textContent = this.raceNumber.toString();

      this.updateStats();
    }

    updateStats() {
      const winRate =
        this.stats.totalRaces > 0
          ? ((this.stats.wins / this.stats.totalRaces) * 100).toFixed(1)
          : "0";

      const totalRacesEl = document.getElementById("totalRaces");
      const winsEl = document.getElementById("wins");
      const winRateEl = document.getElementById("winRate");
      const totalProfitEl = document.getElementById("totalProfit");

      if (totalRacesEl)
        totalRacesEl.textContent = this.stats.totalRaces.toString();
      if (winsEl) winsEl.textContent = this.stats.wins.toString();
      if (winRateEl) winRateEl.textContent = winRate + "%";
      if (totalProfitEl) {
        totalProfitEl.textContent =
          (this.stats.totalProfit >= 0 ? "+$" : "-$") +
          Math.abs(this.stats.totalProfit).toString();
      }
    }

    async startRace() {
      if (
        this.isRacing ||
        !this.selectedHorse ||
        this.balance < this.selectedAmount
      ) {
        if (this.balance < this.selectedAmount) {
          this.showRaceResults("¡Saldo insuficiente!", false);
        } else if (!this.selectedHorse) {
          this.showRaceResults("¡Selecciona un caballo primero!", false);
        }
        return;
      }

      this.isRacing = true;
      this.balance -= this.selectedAmount;

      const startButton = document.getElementById("startRaceButton");
      if (startButton) {
        startButton.disabled = true;
        startButton.textContent = "🏁 CARRERA EN CURSO... 🏁";
      }

      // Countdown
      await this.showCountdown();

      // Generar resultados con probabilidades rigged
      this.currentRaceResults = this.generateRiggedRaceResults();

      // Animar carrera usando los resultados predeterminados
      await this.runRaceAnimation();

      // Evaluar resultado usando los resultados ya calculados
      const isWin = this.checkWin(this.currentRaceResults);

      this.processRaceResult(isWin, this.currentRaceResults);

      // Mostrar animación del ganador
      this.showWinnerAnimation(this.currentRaceResults[0].id);

      // Limpiar
      this.isRacing = false;
      this.currentRaceResults = null;
      if (startButton) {
        startButton.disabled = false;
        startButton.textContent = "🏁 ¡INICIAR CARRERA! 🏁";
      }
      this.raceNumber++;

      this.updateDisplay();
    }

    generateRiggedRaceResults() {
      // Cuanto más alta sea la apuesta, menor la probabilidad de ganar
      const betPenalty = Math.min(this.selectedAmount / 100, 0.9);
      const finalHouseEdge = Math.min(this.houseEdge + betPenalty, 0.95);

      const shouldLose = Math.random() < finalHouseEdge;

      if (shouldLose) {
        return this.generateLosingResults();
      } else {
        return this.generateWinningResults();
      }
    }

    generateLosingResults() {
      // Generar resultados que específicamente hagan perder al jugador
      const results = [...this.horses].sort(() => Math.random() - 0.5);
      const selectedHorseIndex = results.findIndex(
        (r) => r.id === this.selectedHorse
      );

      if (selectedHorseIndex !== -1) {
        // Mover el caballo seleccionado a una posición perdedora
        const selectedHorse = results[selectedHorseIndex];
        results.splice(selectedHorseIndex, 1);

        let newPosition;
        switch (this.selectedBetType) {
          case "win":
            // Asegurar que NO quede primero
            newPosition = 1 + Math.floor(Math.random() * 3); // Posición 2-4
            break;
          case "place":
            // Asegurar que NO quede en los primeros 2
            newPosition = 2 + Math.floor(Math.random() * 2); // Posición 3-4
            break;
          case "show":
            // Asegurar que NO quede en los primeros 3
            newPosition = 3; // Posición 4
            break;
          default:
            newPosition = 3;
        }

        results.splice(newPosition, 0, selectedHorse);
      }

      return results;
    }

    generateWinningResults() {
      const results = [...this.horses].sort(() => Math.random() - 0.5);
      const selectedHorseIndex = results.findIndex(
        (r) => r.id === this.selectedHorse
      );

      if (selectedHorseIndex !== -1) {
        // Mover el caballo seleccionado a una posición ganadora
        const selectedHorse = results[selectedHorseIndex];
        results.splice(selectedHorseIndex, 1);

        let newPosition;
        switch (this.selectedBetType) {
          case "win":
            newPosition = 0; // Primera posición
            break;
          case "place":
            newPosition = Math.random() < 0.5 ? 0 : 1; // Posición 1 o 2
            break;
          case "show":
            newPosition = Math.floor(Math.random() * 3); // Posición 1, 2 o 3
            break;
          default:
            newPosition = 0;
        }

        results.splice(newPosition, 0, selectedHorse);
      }

      return results;
    }

    async showCountdown() {
      const countdownDisplay = document.getElementById("countdownDisplay");
      if (!countdownDisplay) return;

      for (let i = 3; i > 0; i--) {
        countdownDisplay.innerHTML = `<div class="countdown">${i}</div>`;
        await new Promise((resolve) => setTimeout(resolve, 1000));
      }

      countdownDisplay.innerHTML =
        '<div class="countdown" style="color: var(--accent-green);">¡YA!</div>';
      await new Promise((resolve) => setTimeout(resolve, 500));
      countdownDisplay.innerHTML = "";
    }

    async runRaceAnimation() {
      const trackLanes = document.getElementById("trackLanes");
      if (!trackLanes) return;
      
      const trackWidth = trackLanes.offsetWidth;
      const finishLinePosition = trackWidth - 80; // Posición de la línea de meta
      const steps = 50; // Más pasos para animación más suave
      
      // Inicializar posiciones
      this.horses.forEach((horse) => {
        horse.currentPosition = 0;
        const horseElement = document.getElementById(`horse-${horse.id}`);
        if (horseElement) {
          horseElement.classList.add("running");
          horseElement.style.left = "20px";
        }
      });

      // Simular progreso de carrera con resultados predeterminados
      const raceResults = this.currentRaceResults || this.generateRiggedRaceResults();
      this.currentRaceResults = raceResults;
      
      // Calcular velocidades para que los caballos lleguen en el orden correcto
      const finalPositions = {};
      raceResults.forEach((horse, index) => {
        finalPositions[horse.id] = index;
      });

      for (let step = 0; step < steps; step++) {
        const progress = step / (steps - 1);
        
        this.horses.forEach((horse) => {
          const finalPosition = finalPositions[horse.id];
          const targetProgress = this.calculateHorseProgress(progress, finalPosition, steps);
          
          // Añadir variación aleatoria para hacer la carrera más emocionante
          const randomVariation = (Math.random() - 0.5) * 0.1;
          const adjustedProgress = Math.max(0, Math.min(1, targetProgress + randomVariation));
          
          horse.currentPosition = adjustedProgress * finishLinePosition;

          // Actualizar posición visual
          const horseElement = document.getElementById(`horse-${horse.id}`);
          const progressIndicator = document.getElementById(`progress-${horse.id}`);
          
          if (horseElement) {
            horseElement.style.left = `${20 + horse.currentPosition}px`;
          }
          
          // Mostrar indicador de progreso en puntos clave
          if (progressIndicator) {
            const progressPercent = Math.round(adjustedProgress * 100);
            if (progressPercent >= 25 && progressPercent < 30) {
              progressIndicator.style.left = `${20 + horse.currentPosition}px`;
              progressIndicator.textContent = `${horse.name} - 25%`;
              progressIndicator.classList.add("visible");
            } else if (progressPercent >= 50 && progressPercent < 55) {
              progressIndicator.style.left = `${20 + horse.currentPosition}px`;
              progressIndicator.textContent = `${horse.name} - 50%`;
              progressIndicator.classList.add("visible");
            } else if (progressPercent >= 75 && progressPercent < 80) {
              progressIndicator.style.left = `${20 + horse.currentPosition}px`;
              progressIndicator.textContent = `${horse.name} - 75%`;
              progressIndicator.classList.add("visible");
            } else if (progressPercent < 25 || (progressPercent >= 30 && progressPercent < 50) || (progressPercent >= 55 && progressPercent < 75) || progressPercent >= 80) {
              progressIndicator.classList.remove("visible");
            }
          }
        });

        await new Promise((resolve) => setTimeout(resolve, 80));
      }

      // Posicionar caballos en sus posiciones finales exactas
      this.horses.forEach((horse) => {
        const finalPosition = finalPositions[horse.id];
        const horseElement = document.getElementById(`horse-${horse.id}`);
        const progressIndicator = document.getElementById(`progress-${horse.id}`);
        
        if (horseElement) {
          // El ganador llega a la línea de meta, los demás quedan ligeramente atrás
          const finalLeft = finalPosition === 0 ? 
            finishLinePosition : 
            finishLinePosition - (finalPosition * 30) - Math.random() * 20;
          
          horseElement.style.left = `${20 + finalLeft}px`;
          horseElement.classList.remove("running");
        }
        
        // Limpiar indicadores de progreso
        if (progressIndicator) {
          progressIndicator.classList.remove("visible");
        }
      });
    }
    
    calculateHorseProgress(overallProgress, finalPosition, totalSteps) {
      // Los caballos en mejores posiciones finales van más rápido al final
      const baseProgress = overallProgress;
      
      if (finalPosition === 0) {
        // El ganador acelera progresivamente
        return baseProgress * (0.8 + 0.2 * overallProgress);
      } else if (finalPosition === 1) {
        // El segundo lugar mantiene ritmo constante
        return baseProgress * 0.95;
      } else if (finalPosition === 2) {
        // El tercer lugar empieza rápido pero se cansa
        return baseProgress * (1.1 - 0.2 * overallProgress);
      } else {
        // El último lugar va más lento
        return baseProgress * (1.0 - 0.3 * overallProgress);
      }
    }

    showWinnerAnimation(winnerId) {
      const winnerElement = document.getElementById(`horse-${winnerId}`);
      if (winnerElement) {
        winnerElement.classList.add("winner");

        setTimeout(() => {
          winnerElement.classList.remove("winner");
        }, 5000);
      }
    }

    checkWin(results) {
      const selectedHorsePosition = results.findIndex(
        (horse) => horse.id === this.selectedHorse
      );

      switch (this.selectedBetType) {
        case "win":
          return selectedHorsePosition === 0;
        case "place":
          return selectedHorsePosition <= 1;
        case "show":
          return selectedHorsePosition <= 2;
        default:
          return false;
      }
    }

    processRaceResult(isWin, results) {
      this.stats.totalRaces++;
      const selectedHorse = this.horses.find(
        (h) => h.id === this.selectedHorse
      );

      if (isWin && selectedHorse) {
        const multiplier = this.getBetMultiplier(this.selectedBetType);
        const winAmount = Math.round(
          this.selectedAmount * selectedHorse.odds * multiplier
        );

        this.balance += this.selectedAmount + winAmount;
        this.stats.wins++;
        this.stats.totalProfit += winAmount;

        const message = `🎉 ¡${selectedHorse.name} ${this.getPositionText()}! ¡Ganaste $${winAmount}! 🎉`;
        this.showRaceResults(message, true, results);
        this.createCelebration();
      } else {
        this.stats.totalProfit -= this.selectedAmount;
        const message = `💸 ${results[0].name} ganó la carrera. Perdiste $${this.selectedAmount}`;
        this.showRaceResults(message, false, results);
      }
    }

    getPositionText() {
      switch (this.selectedBetType) {
        case "win":
          return "ganó la carrera";
        case "place":
          return "llegó en los primeros 2";
        case "show":
          return "llegó en los primeros 3";
        default:
          return "ganó";
      }
    }

    showRaceResults(message, isWin, finalPositions = null) {
      const resultsDiv = document.getElementById("raceResults");
      if (!resultsDiv) return;

      let resultClass = isWin ? "payout-info" : "lose-info";
      let resultContent = `<div class="${resultClass}">${message}</div>`;

      if (finalPositions) {
        const medals = ["🥇", "🥈", "🥉", "4️⃣"];
        const positionsHtml = finalPositions
          .map(
            (horse, index) =>
              `<div class="position-row">
                            <span class="position-medal">${medals[index]}</span>
                            <span>${horse.name}</span>
                            <span>${horse.emoji}</span>
                        </div>`
          )
          .join("");

        resultContent += `
                        <div class="final-positions">
                            <div style="color: var(--primary-gold); margin-bottom: 1rem; font-weight: 700;">🏁 RESULTADOS FINALES 🏁</div>
                            ${positionsHtml}
                        </div>
                    `;
      }

      resultsDiv.innerHTML = resultContent;
    }

    createCelebration() {
      const overlay = document.getElementById("celebrationOverlay");
      if (!overlay) return;

      overlay.innerHTML = "";

      for (let i = 0; i < 100; i++) {
        const confetti = document.createElement("div");
        confetti.className = "confetti";
        confetti.style.left = Math.random() * 100 + "%";
        confetti.style.animationDelay = Math.random() * 3 + "s";
        confetti.style.background = this.getRandomColor();
        overlay.appendChild(confetti);
      }

      setTimeout(() => {
        overlay.innerHTML = "";
      }, 5000);
    }

    getRandomColor() {
      const colors = [
        "#ffd700",
        "#ff6b6b",
        "#4ecdc4",
        "#45b7d1",
        "#96ceb4",
        "#feca57",
      ];
      return colors[Math.floor(Math.random() * colors.length)];
    }

    // Actualizar odds dinámicamente para mantener el juego interesante
    updateOdds() {
      this.horses.forEach((horse) => {
        const variation = (Math.random() - 0.5) * 0.6;
        horse.odds = Math.max(2.0, Math.min(6.0, horse.odds + variation));
        horse.odds = Math.round(horse.odds * 10) / 10;
      });

      this.createHorseCards();
    }
  }

  // Inicializar el juego
  let horseRacingGame;

  window.addEventListener("DOMContentLoaded", () => {
    horseRacingGame = new HorseRacingGame();

    // Actualizar odds periódicamente
    setInterval(() => {
      if (horseRacingGame && !horseRacingGame.isRacing) {
        horseRacingGame.updateOdds();
      }
    }, 45000); // Cada 45 segundos

    console.log(
      "🎰 Hipódromo Casino Premium - Sistema ultra-rigged activo! 🎰"
    );
  });
</script>

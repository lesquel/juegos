<style is:inline>
  :root {
    --primary-gold: #ffd700;
    --secondary-gold: #ffed4e;
    --accent-red: #ff2d2d;
    --accent-green: #00ff88;
    --accent-blue: #00ccff;
    --dark-bg: #0a0a0a;
    --card-bg: linear-gradient(145deg, #1a1a1a, #2d2d2d);
    --glass-bg: rgba(255, 255, 255, 0.05);
    --neon-shadow: 0 0 20px;
    --premium-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    --casino-green: #0f5132;
    --win-green: #28a745;
    --lose-red: #dc3545;
  }

  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  body {
    font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
    background: radial-gradient(
        circle at 20% 50%,
        rgba(120, 119, 198, 0.3) 0%,
        transparent 50%
      ),
      radial-gradient(
        circle at 80% 20%,
        rgba(255, 119, 198, 0.3) 0%,
        transparent 50%
      ),
      radial-gradient(
        circle at 40% 80%,
        rgba(120, 219, 255, 0.3) 0%,
        transparent 50%
      ),
      linear-gradient(
        135deg,
        #0c0c0c 0%,
        #1a1a1a 25%,
        #0f0f0f 50%,
        #1a1a1a 75%,
        #0c0c0c 100%
      );
    color: white;
    min-height: 100vh;
    padding: 20px;
    overflow-x: hidden;
    position: relative;
  }

  body::before {
    content: "";
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: repeating-linear-gradient(
        90deg,
        transparent,
        transparent 98px,
        rgba(255, 215, 0, 0.02) 100px
      ),
      repeating-linear-gradient(
        0deg,
        transparent,
        transparent 98px,
        rgba(255, 215, 0, 0.02) 100px
      );
    pointer-events: none;
    z-index: 1;
  }

  .casino-container {
    max-width: 1400px;
    margin: 0 auto;
    position: relative;
    z-index: 2;
  }

  .title {
    text-align: center;
    font-size: clamp(2rem, 5vw, 4rem);
    font-weight: 900;
    background: linear-gradient(
      45deg,
      var(--primary-gold),
      var(--secondary-gold),
      var(--primary-gold)
    );
    background-size: 200% 200%;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    margin-bottom: 2rem;
    text-shadow: 0 0 30px rgba(255, 215, 0, 0.5);
    animation:
      titleShine 3s ease-in-out infinite,
      titleFloat 6s ease-in-out infinite;
    letter-spacing: 2px;
  }

  @keyframes titleShine {
    0%,
    100% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
  }

  @keyframes titleFloat {
    0%,
    100% {
      transform: translateY(0px);
    }
    50% {
      transform: translateY(-10px);
    }
  }

  .game-dashboard {
    display: grid;
    grid-template-columns: 1fr 350px;
    gap: 2rem;
    margin-bottom: 2rem;
  }

  .main-game {
    background: var(--card-bg);
    border: 3px solid transparent;
    background-clip: padding-box;
    border-radius: 25px;
    padding: 2rem;
    position: relative;
    backdrop-filter: blur(10px);
    box-shadow:
      0 8px 32px rgba(0, 0, 0, 0.3),
      inset 0 1px 0 rgba(255, 255, 255, 0.1);
  }

  .main-game::before {
    content: "";
    position: absolute;
    inset: 0;
    padding: 3px;
    background: linear-gradient(
      45deg,
      var(--primary-gold),
      var(--accent-blue),
      var(--primary-gold)
    );
    border-radius: inherit;
    mask:
      linear-gradient(#fff 0 0) content-box,
      linear-gradient(#fff 0 0);
    mask-composite: exclude;
    animation: borderGlow 3s linear infinite;
  }

  @keyframes borderGlow {
    0%,
    100% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
  }

  .sidebar {
    background: var(--card-bg);
    border-radius: 20px;
    padding: 1.5rem;
    backdrop-filter: blur(10px);
    border: 2px solid rgba(255, 215, 0, 0.2);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
  }

  .balance-info {
    text-align: center;
    margin-bottom: 2rem;
    background: var(--glass-bg);
    padding: 1.5rem;
    border-radius: 15px;
    border: 2px solid rgba(0, 255, 136, 0.3);
    backdrop-filter: blur(5px);
  }

  .balance {
    font-size: 2.5rem;
    font-weight: 900;
    color: var(--accent-green);
    text-shadow: var(--neon-shadow) var(--accent-green);
    margin-bottom: 0.5rem;
    animation: balancePulse 2s ease-in-out infinite;
  }

  @keyframes balancePulse {
    0%,
    100% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.05);
    }
  }

  .current-bet {
    font-size: 1.1rem;
    color: var(--primary-gold);
    font-weight: 600;
  }

  .game-modes {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin-bottom: 2rem;
    flex-wrap: wrap;
  }

  .mode-button {
    padding: 1rem 1.5rem;
    background: linear-gradient(145deg, #2a2a2a, #1a1a1a);
    color: white;
    border: 2px solid rgba(255, 215, 0, 0.3);
    border-radius: 12px;
    cursor: pointer;
    font-weight: 700;
    font-size: 0.9rem;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    text-transform: uppercase;
    letter-spacing: 1px;
    position: relative;
    overflow: hidden;
  }

  .mode-button::before {
    content: "";
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 215, 0, 0.2),
      transparent
    );
    transition: left 0.5s;
  }

  .mode-button:hover::before {
    left: 100%;
  }

  .mode-button:hover {
    transform: translateY(-3px);
    border-color: var(--primary-gold);
    box-shadow: 0 8px 25px rgba(255, 215, 0, 0.3);
  }

  .mode-button.active {
    background: linear-gradient(145deg, var(--accent-red), #cc1f1f);
    border-color: var(--accent-red);
    box-shadow: var(--neon-shadow) rgba(255, 45, 45, 0.5);
    transform: scale(1.05);
  }

  .dice-container {
    display: flex;
    justify-content: center;
    gap: 2rem;
    margin: 3rem 0;
    flex-wrap: wrap;
    perspective: 1000px;
  }

  .die {
    width: 140px;
    height: 140px;
    background: linear-gradient(145deg, #f8f9fa, #e9ecef);
    border: 4px solid #495057;
    border-radius: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 4.5rem;
    font-weight: 900;
    color: #212529;
    position: relative;
    box-shadow:
      0 15px 30px rgba(0, 0, 0, 0.4),
      inset 0 5px 15px rgba(255, 255, 255, 0.3),
      inset 0 -5px 15px rgba(0, 0, 0, 0.1);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    cursor: pointer;
    transform-style: preserve-3d;
  }

  .die::before {
    content: "";
    position: absolute;
    inset: -2px;
    background: linear-gradient(
      45deg,
      var(--primary-gold),
      var(--secondary-gold)
    );
    border-radius: inherit;
    z-index: -1;
    opacity: 0;
    transition: opacity 0.3s;
  }

  .die:hover {
    transform: rotateX(10deg) rotateY(10deg) scale(1.05);
    box-shadow:
      0 20px 40px rgba(0, 0, 0, 0.5),
      inset 0 5px 15px rgba(255, 255, 255, 0.4);
  }

  .die.rolling {
    animation: diceRoll 0.8s cubic-bezier(0.68, -0.55, 0.265, 1.55);
  }

  @keyframes diceRoll {
    0% {
      transform: rotateX(0deg) rotateY(0deg) scale(1);
    }
    25% {
      transform: rotateX(180deg) rotateY(90deg) scale(1.1);
    }
    50% {
      transform: rotateX(360deg) rotateY(180deg) scale(1.2);
    }
    75% {
      transform: rotateX(540deg) rotateY(270deg) scale(1.1);
    }
    100% {
      transform: rotateX(720deg) rotateY(360deg) scale(1);
    }
  }

  .die.winner {
    animation: winnerCelebration 1.5s ease-in-out infinite;
    border-color: var(--primary-gold);
    box-shadow: var(--neon-shadow) var(--primary-gold);
  }

  .die.winner::before {
    opacity: 1;
  }

  @keyframes winnerCelebration {
    0%,
    100% {
      transform: scale(1) rotateZ(0deg);
    }
    25% {
      transform: scale(1.1) rotateZ(5deg);
    }
    50% {
      transform: scale(1.15) rotateZ(0deg);
    }
    75% {
      transform: scale(1.1) rotateZ(-5deg);
    }
  }

  .betting-area {
    background: var(--glass-bg);
    border: 2px solid rgba(255, 215, 0, 0.2);
    border-radius: 20px;
    padding: 2rem;
    margin: 2rem 0;
    backdrop-filter: blur(10px);
  }

  .betting-options {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  .bet-option {
    background: linear-gradient(145deg, #2a2a2a, #1a1a1a);
    border: 2px solid rgba(255, 215, 0, 0.2);
    border-radius: 12px;
    padding: 1.2rem;
    text-align: center;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    overflow: hidden;
  }

  .bet-option::before {
    content: "";
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 215, 0, 0.1),
      transparent
    );
    transition: left 0.5s;
  }

  .bet-option:hover::before {
    left: 100%;
  }

  .bet-option:hover {
    border-color: var(--accent-blue);
    background: linear-gradient(145deg, #3a3a3a, #2a2a2a);
    transform: translateY(-5px);
    box-shadow: 0 10px 25px rgba(0, 204, 255, 0.2);
  }

  .bet-option.selected {
    border-color: var(--accent-red);
    background: linear-gradient(145deg, #4a2a2a, #3a1a1a);
    box-shadow: var(--neon-shadow) rgba(255, 45, 45, 0.3);
    transform: scale(1.02);
  }

  .bet-title {
    font-weight: 700;
    margin-bottom: 0.5rem;
    color: #ecf0f1;
    font-size: 1.1rem;
  }

  .bet-payout {
    color: var(--primary-gold);
    font-weight: 700;
    font-size: 1.2rem;
    text-shadow: 0 0 10px var(--primary-gold);
  }

  .bet-amount-selector {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin: 1.5rem 0;
    flex-wrap: wrap;
  }

  .amount-chip {
    width: 70px;
    height: 70px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 900;
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    border: 3px solid rgba(0, 0, 0, 0.3);
    box-shadow:
      0 6px 12px rgba(0, 0, 0, 0.3),
      inset 0 2px 4px rgba(255, 255, 255, 0.2);
    position: relative;
  }

  .amount-chip::before {
    content: "";
    position: absolute;
    inset: -3px;
    border-radius: 50%;
    background: linear-gradient(45deg, currentColor, transparent);
    z-index: -1;
    opacity: 0;
    transition: opacity 0.3s;
  }

  .amount-chip:hover {
    transform: scale(1.15) rotateZ(10deg);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.4);
  }

  .amount-chip.selected {
    transform: scale(1.2);
    box-shadow: 0 0 25px currentColor;
  }

  .amount-chip.selected::before {
    opacity: 0.3;
  }

  .chip-1 {
    background: linear-gradient(145deg, #ffffff, #f8f9fa);
    color: #000;
  }
  .chip-5 {
    background: linear-gradient(145deg, #e74c3c, #c0392b);
    color: #fff;
  }
  .chip-10 {
    background: linear-gradient(145deg, #3498db, #2980b9);
    color: #fff;
  }
  .chip-25 {
    background: linear-gradient(145deg, #2ecc71, #27ae60);
    color: #fff;
  }
  .chip-50 {
    background: linear-gradient(145deg, #f39c12, #e67e22);
    color: #fff;
  }
  .chip-100 {
    background: linear-gradient(145deg, #9b59b6, #8e44ad);
    color: #fff;
  }

  .roll-button {
    display: block;
    margin: 2rem auto;
    padding: 1.5rem 3rem;
    font-size: 1.4rem;
    font-weight: 900;
    background: linear-gradient(145deg, var(--win-green), #1e7e34);
    color: white;
    border: none;
    border-radius: 20px;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    text-transform: uppercase;
    letter-spacing: 2px;
    box-shadow:
      0 8px 15px rgba(0, 0, 0, 0.3),
      0 0 0 3px rgba(40, 167, 69, 0.3);
    position: relative;
    overflow: hidden;
  }

  .roll-button::before {
    content: "";
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 255, 255, 0.2),
      transparent
    );
    transition: left 0.5s;
  }

  .roll-button:hover:not(:disabled)::before {
    left: 100%;
  }

  .roll-button:hover:not(:disabled) {
    background: linear-gradient(145deg, #2ecc71, var(--win-green));
    transform: translateY(-3px) scale(1.05);
    box-shadow:
      0 12px 25px rgba(46, 204, 113, 0.4),
      0 0 0 3px rgba(46, 204, 113, 0.5);
  }

  .roll-button:disabled {
    background: linear-gradient(145deg, #6c757d, #5a6268);
    cursor: not-allowed;
    transform: none;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  }

  .game-info {
    text-align: center;
    margin: 2rem 0;
    font-size: 1.2rem;
  }

  .target-info {
    color: var(--accent-blue);
    margin: 1rem 0;
    font-weight: 600;
  }

  .result-display {
    text-align: center;
    margin: 2rem 0;
    min-height: 120px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    background: var(--glass-bg);
    border-radius: 15px;
    padding: 2rem;
    backdrop-filter: blur(5px);
  }

  .win-message {
    font-size: 2.8rem;
    font-weight: 900;
    background: linear-gradient(45deg, var(--accent-green), #7fff00);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    text-shadow: 0 0 30px var(--accent-green);
    animation: winCelebration 1.2s ease-in-out infinite;
  }

  .lose-message {
    font-size: 2.2rem;
    font-weight: 700;
    color: var(--lose-red);
    text-shadow: 0 0 20px var(--lose-red);
    animation: loseShake 0.5s ease-in-out;
  }

  .neutral-message {
    font-size: 1.5rem;
    color: var(--primary-gold);
    font-weight: 600;
  }

  @keyframes winCelebration {
    0%,
    100% {
      transform: scale(1) rotateZ(0deg);
    }
    25% {
      transform: scale(1.1) rotateZ(2deg);
    }
    50% {
      transform: scale(1.15) rotateZ(0deg);
    }
    75% {
      transform: scale(1.1) rotateZ(-2deg);
    }
  }

  @keyframes loseShake {
    0%,
    100% {
      transform: translateX(0);
    }
    25% {
      transform: translateX(-10px);
    }
    75% {
      transform: translateX(10px);
    }
  }

  .statistics {
    background: var(--glass-bg);
    border-radius: 15px;
    padding: 1.5rem;
    margin-bottom: 1.5rem;
    backdrop-filter: blur(5px);
    border: 1px solid rgba(255, 215, 0, 0.2);
  }

  .stats-title {
    color: var(--primary-gold);
    font-size: 1.3rem;
    font-weight: 700;
    margin-bottom: 1rem;
    text-align: center;
    text-shadow: 0 0 10px var(--primary-gold);
  }

  .stat-row {
    display: flex;
    justify-content: space-between;
    margin: 0.8rem 0;
    padding: 0.8rem 0;
    border-bottom: 1px solid rgba(255, 215, 0, 0.1);
    font-weight: 600;
  }

  .stat-row:last-child {
    border-bottom: none;
  }

  .history {
    margin-top: 1.5rem;
  }

  .history-title {
    color: var(--accent-blue);
    margin-bottom: 1rem;
    text-align: center;
    font-weight: 700;
    font-size: 1.1rem;
  }

  .history-rolls {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    justify-content: center;
  }

  .history-roll {
    width: 35px;
    height: 35px;
    background: linear-gradient(145deg, #3a3a3a, #2a2a2a);
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.8rem;
    font-weight: 600;
    border: 2px solid rgba(255, 215, 0, 0.2);
    transition: transform 0.2s;
  }

  .history-roll:hover {
    transform: scale(1.1);
  }

  .history-roll.win {
    background: linear-gradient(145deg, var(--win-green), #1e7e34);
    border-color: var(--win-green);
    box-shadow: 0 0 10px rgba(40, 167, 69, 0.3);
  }

  .history-roll.lose {
    background: linear-gradient(145deg, var(--lose-red), #bd2130);
    border-color: var(--lose-red);
    box-shadow: 0 0 10px rgba(220, 53, 69, 0.3);
  }

  @media (max-width: 1024px) {
    .game-dashboard {
      grid-template-columns: 1fr;
    }
  }

  @media (max-width: 768px) {
    .title {
      font-size: 2rem;
      margin-bottom: 1.5rem;
    }

    .die {
      width: 120px;
      height: 120px;
      font-size: 3.5rem;
    }

    .betting-options {
      grid-template-columns: 1fr;
    }

    .amount-chip {
      width: 60px;
      height: 60px;
      font-size: 0.8rem;
    }

    .main-game,
    .sidebar {
      padding: 1.5rem;
    }

    .roll-button {
      padding: 1.2rem 2rem;
      font-size: 1.2rem;
    }
  }
</style>
<div class="casino-container">
  <h1 class="title">🎲 CASINO DE DADOS PREMIUM 🎲</h1>

  <div class="game-dashboard">
    <div class="main-game">
      <div class="balance-info">
        <div class="balance">💰 $<span id="balance">1000</span></div>
        <div class="current-bet">
          Apuesta Actual: $<span id="currentBetAmount">0</span>
        </div>
      </div>

      <div class="game-modes">
        <button class="mode-button active" data-mode="single">Un Dado</button>
        <button class="mode-button" data-mode="double">Dos Dados</button>
        <button class="mode-button" data-mode="triple">Tres Dados</button>
      </div>

      <div class="dice-container" id="diceContainer">
        <div class="die" id="die1">?</div>
      </div>

      <div class="game-info">
        <div id="gameDescription">
          Modo: Un Dado - Apuesta al resultado específico
        </div>
        <div class="target-info" id="targetInfo">🎯 Selecciona una apuesta</div>
      </div>

      <div class="betting-area">
        <div class="betting-options" id="bettingOptions">
          <!-- Las opciones se generarán dinámicamente -->
        </div>

        <div class="bet-amount-selector">
          <div class="amount-chip chip-1 selected" data-amount="1">$1</div>
          <div class="amount-chip chip-5" data-amount="5">$5</div>
          <div class="amount-chip chip-10" data-amount="10">$10</div>
          <div class="amount-chip chip-25" data-amount="25">$25</div>
          <div class="amount-chip chip-50" data-amount="50">$50</div>
          <div class="amount-chip chip-100" data-amount="100">$100</div>
        </div>
      </div>

      <button class="roll-button" id="rollButton">
        🎲 ¡LANZAR DADOS! 🎲
      </button>

      <div class="result-display" id="resultDisplay">
        <div class="neutral-message">
          🎲 ¡Haz tu apuesta y lanza los dados! 🎲
        </div>
      </div>
    </div>

    <div class="sidebar">
      <div class="statistics">
        <div class="stats-title">📊 ESTADÍSTICAS</div>
        <div class="stat-row">
          <span>Tiradas:</span>
          <span id="totalRolls">0</span>
        </div>
        <div class="stat-row">
          <span>Ganadas:</span>
          <span id="wins">0</span>
        </div>
        <div class="stat-row">
          <span>% Victorias:</span>
          <span id="winRate">0%</span>
        </div>
        <div class="stat-row">
          <span>Ganancia Total:</span>
          <span id="totalProfit">$0</span>
        </div>
        <div class="stat-row">
          <span>Mayor Ganancia:</span>
          <span id="biggestWin">$0</span>
        </div>
      </div>

      <div class="history">
        <div class="history-title">📜 HISTORIAL</div>
        <div class="history-rolls" id="historyRolls"></div>
      </div>
    </div>
  </div>
</div>

<script is:inline>
  class DiceGameState {
    constructor() {
      this.balance = 1000;
      this.gameMode = "single";
      this.isRolling = false;
      this.selectedAmount = 1;
      this.currentBet = { type: null, amount: 1, payout: 0 };
      this.stats = {
        totalRolls: 0,
        wins: 0,
        totalProfit: 0,
        biggestWin: 0,
        history: [],
      };
    }
  }

  class ProbabilityEngine {
    constructor() {
      this.houseEdge = 0.92; // 92% de probabilidad de que la casa gane
    }

    // Sistema de probabilidades ultra-rigged
    generateRiggedResults(gameMode, betType, betAmount) {
      // Cuanto más alta sea la apuesta, menor la probabilidad de ganar
      const betPenalty = Math.min(betAmount / 100, 0.95);
      const finalHouseEdge = Math.min(this.houseEdge + betPenalty, 0.98);

      const shouldLose = Math.random() < finalHouseEdge;

      if (shouldLose) {
        return this.generateLosingResults(gameMode, betType);
      } else {
        return this.generateNormalResults(gameMode);
      }
    }

    generateLosingResults(gameMode, betType) {
      const diceCount =
        gameMode === "single" ? 1 : gameMode === "double" ? 2 : 3;
      let results = [];

      // Generar resultados que específicamente NO ganen la apuesta
      for (let i = 0; i < diceCount; i++) {
        results.push(Math.floor(Math.random() * 6) + 1);
      }

      // Modificar para garantizar pérdida según el tipo de apuesta
      if (betType && betType.includes("exact_")) {
        const targetNumber = parseInt(betType.split("_")[1]);
        // Asegurar que el primer dado NO sea el número apostado
        if (results[0] === targetNumber) {
          results[0] = targetNumber === 6 ? 1 : targetNumber + 1;
        }
      } else if (betType === "even" && results[0] % 2 === 0) {
        results[0] = results[0] === 6 ? 1 : results[0] + 1;
      } else if (betType === "odd" && results[0] % 2 === 1) {
        results[0] = results[0] === 1 ? 2 : results[0] + 1;
      }

      return results;
    }

    generateNormalResults(gameMode) {
      const diceCount =
        gameMode === "single" ? 1 : gameMode === "double" ? 2 : 3;
      const results = [];

      for (let i = 0; i < diceCount; i++) {
        results.push(Math.floor(Math.random() * 6) + 1);
      }

      return results;
    }
  }

  class AnimationController {
    constructor() {
      this.rollDuration = 2000;
    }

    async rollDice(diceCount) {
      const dice = [];

      for (let i = 1; i <= diceCount; i++) {
        const die = document.getElementById(`die${i}`);
        if (die) {
          die.classList.add("rolling");
          dice.push(die);
        }
      }

      // Animación de rotación durante el tiempo especificado
      await new Promise((resolve) => setTimeout(resolve, this.rollDuration));

      dice.forEach((die) => {
        die.classList.remove("rolling");
      });

      return dice;
    }

    showWinnerAnimation(diceElements) {
      diceElements.forEach((die) => {
        die.classList.add("winner");
      });

      setTimeout(() => {
        diceElements.forEach((die) => {
          die.classList.remove("winner");
        });
      }, 3000);
    }

    getDieFace(number) {
      const faces = ["", "⚀", "⚁", "⚂", "⚃", "⚄", "⚅"];
      return faces[number] || "?";
    }
  }

  class BettingEngine {
    constructor(gameState) {
      this.gameState = gameState;
    }

    getBettingOptions(gameMode) {
      switch (gameMode) {
        case "single":
          return [
            ...Array.from({ length: 6 }, (_, i) => ({
              type: `exact_${i + 1}`,
              title: `Número ${i + 1}`,
              payout: 5,
              description: `El dado debe mostrar ${i + 1}`,
            })),
            {
              type: "even",
              title: "Par",
              payout: 1,
              description: "El resultado debe ser par (2,4,6)",
            },
            {
              type: "odd",
              title: "Impar",
              payout: 1,
              description: "El resultado debe ser impar (1,3,5)",
            },
          ];

        case "double":
          return [
            {
              type: "2-6",
              title: "Suma 2-6",
              payout: 2,
              description: "Suma entre 2 y 6",
            },
            {
              type: "7",
              title: "Suma exacta 7",
              payout: 4,
              description: "Suma exacta de 7",
            },
            {
              type: "8-12",
              title: "Suma 8-12",
              payout: 2,
              description: "Suma entre 8 y 12",
            },
            {
              type: "doubles",
              title: "Dobles",
              payout: 8,
              description: "Dobles (1-1, 2-2, etc.)",
            },
            {
              type: "even_sum",
              title: "Suma Par",
              payout: 1,
              description: "Suma par",
            },
            {
              type: "odd_sum",
              title: "Suma Impar",
              payout: 1,
              description: "Suma impar",
            },
          ];

        case "triple":
          return [
            {
              type: "triple_same",
              title: "Triple Igual",
              payout: 30,
              description: "Los 3 dados iguales",
            },
            {
              type: "sum_10_11",
              title: "Suma 10-11",
              payout: 3,
              description: "Suma entre 10 y 11",
            },
            {
              type: "sum_12_17",
              title: "Suma 12-17",
              payout: 1,
              description: "Suma entre 12 y 17",
            },
            {
              type: "all_even",
              title: "Todos Pares",
              payout: 4,
              description: "Los 3 dados pares",
            },
            {
              type: "all_odd",
              title: "Todos Impares",
              payout: 4,
              description: "Los 3 dados impares",
            },
            {
              type: "sequence",
              title: "Secuencia",
              payout: 15,
              description: "Números consecutivos",
            },
          ];

        default:
          return [];
      }
    }

    evaluateResult(results, betType) {
      const [die1, die2, die3] = results;
      const sum = results.reduce((a, b) => a + b, 0);

      switch (betType) {
        // Un dado
        case "exact_1":
        case "exact_2":
        case "exact_3":
        case "exact_4":
        case "exact_5":
        case "exact_6":
          const targetNumber = parseInt(betType.split("_")[1]);
          return die1 === targetNumber;

        case "even":
          return die1 % 2 === 0;

        case "odd":
          return die1 % 2 === 1;

        // Dos dados
        case "2-6":
          return sum >= 2 && sum <= 6;

        case "7":
          return sum === 7;

        case "8-12":
          return sum >= 8 && sum <= 12;

        case "doubles":
          return die1 === die2;

        case "even_sum":
          return sum % 2 === 0;

        case "odd_sum":
          return sum % 2 === 1;

        // Tres dados
        case "triple_same":
          return die1 === die2 && die2 === die3;

        case "sum_10_11":
          return sum === 10 || sum === 11;

        case "sum_12_17":
          return sum >= 12 && sum <= 17;

        case "all_even":
          return results.every((die) => die % 2 === 0);

        case "all_odd":
          return results.every((die) => die % 2 === 1);

        case "sequence":
          const sorted = [...results].sort((a, b) => a - b);
          return sorted[1] === sorted[0] + 1 && sorted[2] === sorted[1] + 1;

        default:
          return false;
      }
    }
  }

  class UIController {
    constructor(gameState, animationController) {
      this.gameState = gameState;
      this.animationController = animationController;
    }

    updateDisplay() {
      const balanceElement = document.getElementById("balance");
      if (balanceElement) {
        balanceElement.textContent = this.gameState.balance;
      }
      this.updateCurrentBet();
    }

    updateCurrentBet() {
      const betAmountElement = document.getElementById("currentBetAmount");
      const targetInfoElement = document.getElementById("targetInfo");

      if (betAmountElement) {
        const betAmount = this.gameState.currentBet.type
          ? this.gameState.currentBet.amount
          : 0;
        betAmountElement.textContent = betAmount;
      }

      if (targetInfoElement) {
        if (this.gameState.currentBet.type) {
          const potentialWin =
            this.gameState.currentBet.amount * this.gameState.currentBet.payout;
          targetInfoElement.textContent = `💰 Ganancia potencial: $${potentialWin}`;
        } else {
          targetInfoElement.textContent = "🎯 Selecciona una apuesta";
        }
      }
    }

    showResult(message, isWin) {
      const resultDisplay = document.getElementById("resultDisplay");
      if (!resultDisplay) return;

      if (isWin) {
        resultDisplay.innerHTML = `<div class="win-message">🎉 ${message} 🎉</div>`;
      } else {
        resultDisplay.innerHTML = `<div class="lose-message">💸 ${message}</div>`;
      }

      setTimeout(() => {
        if (!this.gameState.isRolling) {
          resultDisplay.innerHTML =
            '<div class="neutral-message">🎲 ¡Haz tu apuesta y lanza los dados! 🎲</div>';
        }
      }, 4000);
    }

    updateStats() {
      const stats = this.gameState.stats;
      const winRate =
        stats.totalRolls > 0
          ? ((stats.wins / stats.totalRolls) * 100).toFixed(1)
          : 0;

      const elements = {
        totalRolls: document.getElementById("totalRolls"),
        wins: document.getElementById("wins"),
        winRate: document.getElementById("winRate"),
        totalProfit: document.getElementById("totalProfit"),
        biggestWin: document.getElementById("biggestWin"),
      };

      if (elements.totalRolls)
        elements.totalRolls.textContent = stats.totalRolls;
      if (elements.wins) elements.wins.textContent = stats.wins;
      if (elements.winRate) elements.winRate.textContent = winRate + "%";
      if (elements.totalProfit) {
        elements.totalProfit.textContent =
          (stats.totalProfit >= 0 ? "+$" : "-$") + Math.abs(stats.totalProfit);
      }
      if (elements.biggestWin)
        elements.biggestWin.textContent = "$" + stats.biggestWin;

      // Actualizar historial visual
      this.updateHistory();
    }

    updateHistory() {
      const historyContainer = document.getElementById("historyRolls");
      if (!historyContainer) return;

      historyContainer.innerHTML = "";

      this.gameState.stats.history.forEach((entry) => {
        const rollDiv = document.createElement("div");
        rollDiv.className = `history-roll ${entry.win ? "win" : "lose"}`;
        rollDiv.textContent = entry.result;
        rollDiv.title = entry.win ? "🎉 Ganaste" : "💸 Perdiste";
        historyContainer.appendChild(rollDiv);
      });
    }
  }

  class DiceGame {
    constructor() {
      this.gameState = new DiceGameState();
      this.probabilityEngine = new ProbabilityEngine();
      this.animationController = new AnimationController();
      this.bettingEngine = new BettingEngine(this.gameState);
      this.uiController = new UIController(
        this.gameState,
        this.animationController
      );

      this.init();
    }

    init() {
      this.setupEventListeners();
      this.uiController.updateDisplay();
      this.generateBettingOptions();
      this.updateDiceDisplay();
      this.showWelcomeMessage();
    }

    showWelcomeMessage() {
      console.log("🎲 Casino de Dados Premium iniciado");
      console.log(
        "🎯 Probabilidades muy ajustadas para la casa (92% house edge)"
      );
      console.log("💰 ¡Que tengas suerte... la vas a necesitar!");
    }

    setupEventListeners() {
      // Selección de cantidad de apuesta
      document.querySelectorAll(".amount-chip").forEach((chip) => {
        chip.addEventListener("click", (e) => {
          const selectedChip = document.querySelector(".amount-chip.selected");
          if (selectedChip) selectedChip.classList.remove("selected");

          e.target.classList.add("selected");
          this.gameState.selectedAmount = parseInt(e.target.dataset.amount);
          this.gameState.currentBet.amount = this.gameState.selectedAmount;
          this.uiController.updateCurrentBet();
        });
      });

      // Botones de modo de juego
      document.querySelectorAll(".mode-button").forEach((button) => {
        button.addEventListener("click", (e) => {
          if (this.gameState.isRolling) return;

          const mode = e.target.dataset.mode;
          this.setGameMode(mode);

          // Actualizar estado visual de botones
          document
            .querySelectorAll(".mode-button")
            .forEach((btn) => btn.classList.remove("active"));
          e.target.classList.add("active");
        });
      });

      // Botón de lanzar dados
      document.getElementById("rollButton").addEventListener("click", () => {
        this.rollDice();
      });
    }

    setGameMode(mode) {
      if (this.gameState.isRolling) return;

      this.gameState.gameMode = mode;
      this.gameState.currentBet = {
        type: null,
        amount: this.gameState.selectedAmount,
        payout: 0,
      };

      this.updateDiceDisplay();
      this.generateBettingOptions();
      this.uiController.updateDisplay();
    }

    updateDiceDisplay() {
      const container = document.getElementById("diceContainer");
      if (!container) return;

      container.innerHTML = "";

      const diceCount =
        this.gameState.gameMode === "single"
          ? 1
          : this.gameState.gameMode === "double"
            ? 2
            : 3;

      for (let i = 1; i <= diceCount; i++) {
        const die = document.createElement("div");
        die.className = "die";
        die.id = `die${i}`;
        die.textContent = "?";
        container.appendChild(die);
      }
    }

    generateBettingOptions() {
      const container = document.getElementById("bettingOptions");
      if (!container) return;

      container.innerHTML = "";

      const options = this.bettingEngine.getBettingOptions(
        this.gameState.gameMode
      );
      const descriptions = {
        single: "Modo: Un Dado - Apuesta al resultado específico",
        double: "Modo: Dos Dados - Apuesta a la suma total",
        triple: "Modo: Tres Dados - Apuestas especiales",
      };

      const gameDescElement = document.getElementById("gameDescription");
      if (gameDescElement) {
        gameDescElement.textContent = descriptions[this.gameState.gameMode];
      }

      options.forEach((option) => {
        const div = document.createElement("div");
        div.className = "bet-option";
        div.dataset.type = option.type;
        div.dataset.payout = option.payout;

        div.innerHTML = `
                        <div class="bet-title">${option.title}</div>
                        <div class="bet-payout">Paga ${option.payout}:1</div>
                    `;

        div.addEventListener("click", (e) =>
          this.selectBet(option.type, option.payout, e)
        );
        container.appendChild(div);
      });
    }

    selectBet(type, payout, event) {
      if (this.gameState.isRolling) return;

      // Actualizar selección visual
      document
        .querySelectorAll(".bet-option")
        .forEach((opt) => opt.classList.remove("selected"));
      event.target.closest(".bet-option").classList.add("selected");

      this.gameState.currentBet = {
        type: type,
        amount: this.gameState.selectedAmount,
        payout: payout,
      };

      this.uiController.updateCurrentBet();
    }

    async rollDice() {
      if (
        this.gameState.isRolling ||
        !this.gameState.currentBet.type ||
        this.gameState.balance < this.gameState.currentBet.amount
      ) {
        if (this.gameState.balance < this.gameState.currentBet.amount) {
          this.uiController.showResult("¡Saldo insuficiente!", false);
        } else if (!this.gameState.currentBet.type) {
          this.uiController.showResult(
            "¡Selecciona una apuesta primero!",
            false
          );
        }
        return;
      }

      this.gameState.isRolling = true;
      this.gameState.balance -= this.gameState.currentBet.amount;

      const rollButton = document.getElementById("rollButton");
      if (rollButton) {
        rollButton.disabled = true;
        rollButton.textContent = "🎲 RODANDO... 🎲";
      }

      // Obtener número de dados
      const diceCount =
        this.gameState.gameMode === "single"
          ? 1
          : this.gameState.gameMode === "double"
            ? 2
            : 3;

      // Animación de rodado
      const dice = await this.animationController.rollDice(diceCount);

      // Generar resultados con probabilidades rigged
      const results = this.probabilityEngine.generateRiggedResults(
        this.gameState.gameMode,
        this.gameState.currentBet.type,
        this.gameState.currentBet.amount
      );

      // Mostrar resultados
      dice.forEach((die, index) => {
        if (die && results[index]) {
          die.textContent = this.animationController.getDieFace(results[index]);
        }
      });

      // Evaluar resultado
      const isWin = this.bettingEngine.evaluateResult(
        results,
        this.gameState.currentBet.type
      );
      this.processResult(isWin, results);

      this.gameState.isRolling = false;
      if (rollButton) {
        rollButton.disabled = false;
        rollButton.textContent = "🎲 ¡LANZAR DADOS! 🎲";
      }

      this.uiController.updateDisplay();
    }

    processResult(isWin, results) {
      this.gameState.stats.totalRolls++;

      if (isWin) {
        const winAmount =
          this.gameState.currentBet.amount * this.gameState.currentBet.payout;
        this.gameState.balance += this.gameState.currentBet.amount + winAmount;
        this.gameState.stats.wins++;
        this.gameState.stats.totalProfit += winAmount;

        if (winAmount > this.gameState.stats.biggestWin) {
          this.gameState.stats.biggestWin = winAmount;
        }

        this.uiController.showResult(`¡GANASTE $${winAmount}!`, true);
        this.highlightWinningDice();
        this.gameState.stats.history.unshift({
          result: results.join("-"),
          win: true,
        });
      } else {
        this.gameState.stats.totalProfit -= this.gameState.currentBet.amount;
        this.uiController.showResult(
          `Perdiste $${this.gameState.currentBet.amount}`,
          false
        );
        this.gameState.stats.history.unshift({
          result: results.join("-"),
          win: false,
        });
      }

      // Mantener solo los últimos 20 resultados
      if (this.gameState.stats.history.length > 20) {
        this.gameState.stats.history.pop();
      }

      this.uiController.updateStats();
    }

    highlightWinningDice() {
      const diceCount =
        this.gameState.gameMode === "single"
          ? 1
          : this.gameState.gameMode === "double"
            ? 2
            : 3;

      const diceElements = [];
      for (let i = 1; i <= diceCount; i++) {
        const die = document.getElementById(`die${i}`);
        if (die) diceElements.push(die);
      }

      this.animationController.showWinnerAnimation(diceElements);
    }
  }

  // Inicializar el juego cuando se carga la página
  window.addEventListener("DOMContentLoaded", () => {
    const diceGame = new DiceGame();
    console.log("🎰 Casino de Dados Premium - Sistema rigged activo! 🎰");
  });
</script>
